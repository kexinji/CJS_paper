alpha <- exp(abs(t[ij] - t[ij_1])*log(theta[4]))
tAge <- unique(temp$age)
uW <- unique(temp$underWeight)
oW <- unique(temp$overWeight)
f_ij <- res$fHat[temp$standday[ij]]
f_ij1 <- res$fHat[temp$standday[ij_1]]
# Record response, standday for plotting
standay[cl, i] <- temp$standday[ij]
mu_true[cl, i] <- log(data[ij, 4])
#--------------------------------------------------------------------------
# prediction est conditional on true prior data
mu_naive[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(log(data[ij_1,4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[1,i] <- mean((mu_naive[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 2
if (all(t[ij] %in% t[ij_pc])) { # Check if time points in C3 is a subset of C2
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc <- log(temp[match(t[ij_1][-1], t[ij_pc]),4])
} else {
# linear interpolation from data in Cycle 2, produce NA for end points
int <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_pc <- log(int(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc ) ) > 0) {
# check the position of NA
na.pos <- which(is.na(data_pc))
# obtain interpolation for NA produced from the first cycle, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na <- log(int.na(temp$standday[which(temp$CYCLE == 3)][na.pos]))
}
# merge the interpolation for NA with the rest of Non-NA interpolation produced from 2nd cycle.
data_pc[na.pos] <- data_na
}
mu_pc[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[2,i] <- mean((mu_pc[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 1
# Obtain observations from C1, at time points from C3
if (all(t[ij] %in% t[ij_pc1])) { # Check if time points in C3 is a subset of C1
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc1 <- log(temp[match(t[ij_1][-1], t[ij_pc1]),4])
} else {
# linear interpolation from data in Cycle 1, produce NA for end points
int1 <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
data_pc1 <- log(int1(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc1 ) ) > 0) {
# check the position of NA
na.pos1 <- which(is.na(data_pc1))
# obtain interpolation for NA produced from cycle 2, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na1 <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na1 <- log(int.na1(temp$standday[which(temp$CYCLE == 3)][na.pos]))
}
# merge the interpolation for NA with the rest of Non-NA interpolation produced from cycle 1.
data_pc1[na.pos] <- data_na1
}
mu_pc1[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc1) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[3,i] <- mean((mu_pc1[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction est conditional on predictive prior data
mu_pre[1, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[1] + alpha[1]*(log(data[ij_1[1],4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[1])
for (j in 2:length(ij)) {
mu_pre[j, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[j] + alpha[j]*(mu_pre[j-1, i] - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[j])
}
pse_sub[4,i] <- mean((mu_pre[cl, i] - log(data[ij, 4]))^2)
#----------------------------------------------------------------
# Weighted version of past two cycles
mu25[cl, i] <- 0.25*mu_pre[cl, i] + 0.75*mu_pc[cl, i]
mu50[cl, i] <- 0.50*mu_pre[cl, i] + 0.50*mu_pc[cl, i]
mu75[cl, i] <- 0.75*mu_pre[cl, i] + 0.25*mu_pc[cl, i]
pse_sub[5,i] <- mean((mu25[cl, i] - log(data[ij, 4]))^2)
pse_sub[6,i] <- mean((mu50[cl, i] - log(data[ij, 4]))^2)
pse_sub[7,i] <- mean((mu75[cl, i] - log(data[ij, 4]))^2)
}
# Record the average pse over all m subjects for the dataset
pse <- rowMeans(pse_sub)
pse
pse_sub
#--------------------------------------------------------------------------
# Index identifying subj's with the smallest, second smallest, median and largest PSE values
pseIn <- c(which.min(pse_sub[1,]), match(sort(pse_sub[1,], T)[m-1], pse_sub[1,]), match(n.median(pse_sub[1,]), pse_sub[1,]), which.max(pse_sub[1,]))
mu <- cbind(mu_true[,pseIn], mu_naive[,pseIn], mu_pc[,pseIn], mu_pc1[,pseIn], mu_pre[,pseIn], mu25[,pseIn], mu50[,pseIn], mu75[,pseIn])
sday <- standay[,pseIn]
# index of non-na standdaysay
si <- sapply(1:4, function(v) return(1:sum(!is.na(sday[,v]))))
# plot smallest, second smallest, median and largest PSE values
# dev.new(width=8, height=2)
par(mfrow=c(2,2))
matplot(sday[si[[1]], 1], mu[si[[1]], seq(1, 32, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[2]], 2], mu[si[[2]], seq(2, 32, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Second Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[3]], 3], mu[si[[3]], seq(3, 32, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Median PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[4]], 4], mu[si[[4]], seq(4, 32, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Largest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
pseIn
set.seed(50)
samp <- sample(1:max(dataComp[,1]), m)
samp
set.seed(48)
samp <- sample(1:max(dataComp[,1]), m)
samp
16 %in% samp
18 %in% samp
m <- 50
samp <- sample(1:max(dataComp[,1]), m)
dataComp <- read.table("data_3cycle.txt", header = T)
# dataComp <- subset(dataComp, select = c(womanid, standday, adjpdg2, age, BMI))
# create two indicator variables
dataComp$underWeight <- 0
dataComp$underWeight[which(dataComp$BMI == 1)] <- 1
dataComp$overWeight <- 0
dataComp$overWeight[which(dataComp$BMI == 3)] <- 1
dataComp$BMI <- NULL
length(unique(dataComp[,1]))
dim(dataComp)
setwd("~/Dropbox/code/multipleCycle/dataset_creation")
#=========================================================================
# Import dataset cycle
#=========================================================================
cycle <- read.csv("cycle.csv", header=TRUE, sep=",")
# drop the last two columns
cycle <- cycle[,1:3]
#-------------------------------------------------------------------
# Keep those subjects that have more than 10 obs'n per cycle
cycle <- cycle[which(cycle[,3] > 10),]
#-------------------------------------------------------------------
# Delete those subjects with less than 3 cycles
id <- unique(cycle[,1])
tol <- length(id) # 328 subjects
# find the number of cycles for each woman
num <- sapply(1:tol, function(v) return(nrow(cycle[which(cycle[,1] == id[v]),])))
# create a variable cycleTol documenting the number of cycles each woman has in record
cycleTol <- unlist(lapply(1:tol, function(v) return(rep(num[v], num[v]))))
cycle$cycleTol <- cycleTol
# Keep those subjs with > 2 cycles
cycle <- cycle[which(cycle[,4] > 2),]
#-------------------------------------------------------------------
# Delete those subjects that don't have consecutive cycles
idnew <- unique(cycle[,1])
tolnew <- length(idnew) # 204 subjects
# return true if the subject has concecutive cycles
concecutive <- sapply(1:tolnew, function(v) return(all(diff(cycle[which(cycle[,1] == idnew[v]), 2]) == 1)))
# create a dataset indicating whether subjects have concecutive cycles
concecutiveTemp <- cbind(idnew, concecutive)
# subject id that have at least 3 concecutive cycles, 116 subjects
cId <-  concecutiveTemp[which(concecutiveTemp[,2] == 1), 1] # concecutiveId
tolCon <- length(cId)
# Keep those that have at least 3 concecutive cycles
concecutivelist <- lapply(1:tolCon, function(v) return(subset(cycle, cycle[,1] == cId[v])))
concecutiveCycle <- do.call("rbind", concecutivelist)
#-------------------------------------------------------------------
# Keep first 3 cycles for subjects
# Subj. with 3 concecutive cycles
concecutiveCycle3 <- do.call("rbind", by(concecutiveCycle, concecutiveCycle[,1], head, n = 3))
cc3 <- concecutiveCycle3[,1:3] # concecutiveCycle3
#=========================================================================
# Add responses - import dataset after
#=========================================================================
after <- read.csv("after.csv", header=TRUE, sep=",")
after <- after[,1:5] # 31945 * 5
# Go through each row and determine if a value is zero
row_sub = apply(after, 1, function(row) all(row !=0 ))
# Subset as usual
after <- after[row_sub,] # 30084 * 5
# Merge datasets after and concecutiveCycle3 cc3
afterlist <- lapply(1:tolCon, function(v) return(after[which(after[,1] == cId[v]),][which(after[which(after[,1] == cId[v]),][,2] %in% cc3[which(cc3[,1] == cId[v]), 2]),]))
afterC <- do.call("rbind", afterlist) # 9921 * 5
#=========================================================================
# Add age and BMI into dataset afterC
#=========================================================================
ready_cycle <- read.csv("ready_cycle.csv", header=TRUE, sep=",")
ready_cycle <- ready_cycle[,c(1, 29, 31)] # 309 subjects
# merge with concecutiveId
rc <- subset(ready_cycle, ready_cycle[,1] %in% cId) # 113 subj.
rc <- rc[-which(rc[,1] == 156), 1:3] # 112 subj.
# delete subj. that don't have age BMI data
temp <- cbind(cId, as.numeric(cId %in% ready_cycle[,1])) # 118, 335, 1019, 156
afterC <- subset(afterC, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# find the number of cycles for each woman
fid <- rc[,1] # final id
fidlength <- length(fid)
numObs <- sapply(1:fidlength, function(v) return(nrow(afterC[which(afterC[,1] == fid[v]),])))
age <- sapply(1:fidlength, function(v) return(rep(rc[v,2], numObs[v])))
BMI <- sapply(1:fidlength, function(v) return(rep(rc[v,3], numObs[v])))
# Add age and BMI to afterC, 9592 * 7, 112 subjects
afterC$age <- unlist(age)
afterC$BMI <- unlist(BMI)
#=========================================================================
# Delete missing data
#=========================================================================
# subset afterC, those with 4 concecutive cycles
# fid_4c <- c(2, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 20, 22, 25, 28, 30, 32, 34, 38, 39, 47, 60, 69, 81, 82, 89, 91, 92, 93, 99,
#             103, 107, 108, 123, 126, 128, 134, 138, 143, 144, 150, 166, 168, 170, 171, 174, 192, 193, 194, 198,
#             200, 201, 202, 210, 213, 217, 225, 234, 239, 251, 256, 274, 275, 284, 286, 287, 294,
#             302, 316, 1004, 1010, 1022, 1039, 1040, 1053, 1057, 1066, 1071, 1074, 1083, 1094, 1098, 1104, 1127)
#
# afterC <- subset(afterC, afterC[,1] %in% fid_4c) # 7112 * 10
# obtain index for subj id and cycle, obtain new cc3
cc3N <- subset(cc3, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# cc3N <- subset(cc3, (HSN4 %in% fid_4c)) # 252*3
# cycleLength for each subj each cycle
# clength is the actual length of the cycle
# cMAx is the max of the nominal length
# e.g. a cycle is 1, 3, 5, 6, clength = 4, cMax = 6
clength <- sapply(1:dim(cc3N)[1], function(v) return(nrow(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),])))
cMax <- sapply(1:dim(cc3N)[1], function(v) return(max(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),3])))
# range of cycle lengths for each woman
cRange <- sapply(0:111, function(i) return(max(cMax[(1+3*i):(3+3*i)]) - min(cMax[(1+3*i):(3+3*i)])))
length(cRange[which(cRange == 1)]) # 7/112
length(cRange[which(cRange <= 5)]) # 73/112
length(cRange[which(cRange <= 10)]) # 94/112
hist(cRange, main = "Range of Cycle Lengths for Each Woman")
# missing data
temp <- 1-clength/cMax  # 112*3 = 336
hist(temp, main = "1 - num obs'n/max \n for each woman for each cycle", xlab = "1-clength/cMax")
length(temp[which(temp == 0)]) # 126
length(temp[which(temp <= 0.1)]) # 285
# Only keep those with less than or equal to 10 cRange, down to 94
cc3N$range <- rep(cRange, each = 3)
cc3N$missing <- temp
cc3N <- cc3N[cc3N[,4] <= 10,]
#/---------------------------------------------
# testing for clength
# v <- 3
# a <- afterC[which(afterC[,1] == cc3N[v,1]),]
# nrow(a[which(a[,2]== cc3N[v,2]),])
#
# max(a[which(a[,2]== cc3N[v,2]),3])
#----------------------------------------------/
#=========================================================================
# Final dataset
#=========================================================================
#-----------------------------------------------------------
# Subset afterC according to the final woman id
fid_4c <- unique(cc3N[,1]) # final id
afterC <- subset(afterC, afterC[,1] %in% fid_4c)
#/-----------------------------------------------------------
# add standday
# new cMax clength, it's after the trimming for 94 women
cMax <- sapply(1:dim(cc3N)[1], function(v) return(max(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),3])))
clength <- sapply(1:dim(cc3N)[1], function(v) return(nrow(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),])))
range(clength)
7693*2
niVec <- sapply(1:94, function(v) return(nrow(data[which(data[,1] == v),])))
range(niVec)
niVec <- sapply(1:94, function(v) return(nrow(dataComp[which(dataComp[,1] == v),])))
niVec
range(niVec)
mean(clength)
length(seq(1, 28, by = 0.1))
afterC$cycleMax <- unlist(sapply(1:(length(fid_4c)*3), function(v) return(rep(cMax[v], clength[v]))))
afterC$standard <- afterC$DAY*28/afterC$cycleMax
afterC$standday <- round(afterC$standard, 1)
head(afterC)
dim(afterC)
length(unique(afterC[,10]))
#-----------------------------------------------------------
# change cycle index
afterC[,2] <- unlist(sapply(1:length(fid_4c), function(v) return(c(rep(1, clength[1+3*(v-1)]), rep(2, clength[2+3*(v-1)]), rep(3, clength[3+3*(v-1)])))))
#-----------------------------------------------------------
# add womanid
numObs <- sapply(1:length(fid_4c), function(v) return(nrow(afterC[which(afterC[,1] == fid_4c[v]),])))
womanid <- sapply(1:length(fid_4c), function(v) return(rep(v, numObs[v])))
afterC$womanid <- unlist(womanid)
# final data set that has 3 concecutive cycles with age and BMI.
# 112 subj. in total, 9592*6
# delete cycleLength and HSN4
# data <- afterC[,-c(1:3,8,9)]
# data <- data[,c(6,5,1:4)]
# data_3c <- afterC[,c(12,2,11,4:7)]
#-----------------------------------------------------------
# final dataset
data_3c <- subset(afterC, select = c(womanid, CYCLE, standday, adjpdg2, adje1c2, age, BMI))
write.table(data_3c, "data_3cycle.txt", sep="\t", row.names=F)
age_index <- sapply(1:(m-1), function(v) return(1+sum(niVec[1:v])))
medianAge <- median(data[c(1, age_index), 6])
medianAge
median(data[c(1, age_index), 6])
data[c(1, age_index), 6]
median(dataComp[c(1, age_index), 6])
#=========================================================================
# Import dataset cycle
#=========================================================================
cycle <- read.csv("cycle.csv", header=TRUE, sep=",")
# drop the last two columns
cycle <- cycle[,1:3]
#-------------------------------------------------------------------
# Keep those subjects that have more than 10 obs'n per cycle
cycle <- cycle[which(cycle[,3] > 10),]
#-------------------------------------------------------------------
# Delete those subjects with less than 3 cycles
id <- unique(cycle[,1])
tol <- length(id) # 328 subjects
# find the number of cycles for each woman
num <- sapply(1:tol, function(v) return(nrow(cycle[which(cycle[,1] == id[v]),])))
# create a variable cycleTol documenting the number of cycles each woman has in record
cycleTol <- unlist(lapply(1:tol, function(v) return(rep(num[v], num[v]))))
cycle$cycleTol <- cycleTol
# Keep those subjs with > 2 cycles
cycle <- cycle[which(cycle[,4] > 2),]
#-------------------------------------------------------------------
# Delete those subjects that don't have consecutive cycles
idnew <- unique(cycle[,1])
tolnew <- length(idnew) # 204 subjects
# return true if the subject has concecutive cycles
concecutive <- sapply(1:tolnew, function(v) return(all(diff(cycle[which(cycle[,1] == idnew[v]), 2]) == 1)))
# create a dataset indicating whether subjects have concecutive cycles
concecutiveTemp <- cbind(idnew, concecutive)
# subject id that have at least 3 concecutive cycles, 116 subjects
cId <-  concecutiveTemp[which(concecutiveTemp[,2] == 1), 1] # concecutiveId
tolCon <- length(cId)
# Keep those that have at least 3 concecutive cycles
concecutivelist <- lapply(1:tolCon, function(v) return(subset(cycle, cycle[,1] == cId[v])))
concecutiveCycle <- do.call("rbind", concecutivelist)
#-------------------------------------------------------------------
# Keep first 3 cycles for subjects
# Subj. with 3 concecutive cycles
concecutiveCycle3 <- do.call("rbind", by(concecutiveCycle, concecutiveCycle[,1], head, n = 3))
cc3 <- concecutiveCycle3[,1:3] # concecutiveCycle3
#=========================================================================
# Add responses - import dataset after
#=========================================================================
after <- read.csv("after.csv", header=TRUE, sep=",")
after <- after[,1:5] # 31945 * 5
# Go through each row and determine if a value is zero
row_sub = apply(after, 1, function(row) all(row !=0 ))
# Subset as usual
after <- after[row_sub,] # 30084 * 5
# Merge datasets after and concecutiveCycle3 cc3
afterlist <- lapply(1:tolCon, function(v) return(after[which(after[,1] == cId[v]),][which(after[which(after[,1] == cId[v]),][,2] %in% cc3[which(cc3[,1] == cId[v]), 2]),]))
afterC <- do.call("rbind", afterlist) # 9921 * 5
#=========================================================================
# Add age and BMI into dataset afterC
#=========================================================================
ready_cycle <- read.csv("ready_cycle.csv", header=TRUE, sep=",")
ready_cycle <- ready_cycle[,c(1, 29, 31)] # 309 subjects
# merge with concecutiveId
rc <- subset(ready_cycle, ready_cycle[,1] %in% cId) # 113 subj.
rc <- rc[-which(rc[,1] == 156), 1:3] # 112 subj.
# delete subj. that don't have age BMI data
temp <- cbind(cId, as.numeric(cId %in% ready_cycle[,1])) # 118, 335, 1019, 156
afterC <- subset(afterC, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# find the number of cycles for each woman
fid <- rc[,1] # final id
fidlength <- length(fid)
numObs <- sapply(1:fidlength, function(v) return(nrow(afterC[which(afterC[,1] == fid[v]),])))
age <- sapply(1:fidlength, function(v) return(rep(rc[v,2], numObs[v])))
BMI <- sapply(1:fidlength, function(v) return(rep(rc[v,3], numObs[v])))
# Add age and BMI to afterC, 9592 * 7, 112 subjects
afterC$age <- unlist(age)
afterC$BMI <- unlist(BMI)
#=========================================================================
# Delete missing data
#=========================================================================
# subset afterC, those with 4 concecutive cycles
# fid_4c <- c(2, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 20, 22, 25, 28, 30, 32, 34, 38, 39, 47, 60, 69, 81, 82, 89, 91, 92, 93, 99,
#             103, 107, 108, 123, 126, 128, 134, 138, 143, 144, 150, 166, 168, 170, 171, 174, 192, 193, 194, 198,
#             200, 201, 202, 210, 213, 217, 225, 234, 239, 251, 256, 274, 275, 284, 286, 287, 294,
#             302, 316, 1004, 1010, 1022, 1039, 1040, 1053, 1057, 1066, 1071, 1074, 1083, 1094, 1098, 1104, 1127)
#
# afterC <- subset(afterC, afterC[,1] %in% fid_4c) # 7112 * 10
# obtain index for subj id and cycle, obtain new cc3
cc3N <- subset(cc3, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# cc3N <- subset(cc3, (HSN4 %in% fid_4c)) # 252*3
# cycleLength for each subj each cycle
# clength is the actual length of the cycle
# cMAx is the max of the nominal length
# e.g. a cycle is 1, 3, 5, 6, clength = 4, cMax = 6
clength <- sapply(1:dim(cc3N)[1], function(v) return(nrow(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),])))
cMax <- sapply(1:dim(cc3N)[1], function(v) return(max(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),3])))
# range of cycle lengths for each woman
cRange <- sapply(0:111, function(i) return(max(cMax[(1+3*i):(3+3*i)]) - min(cMax[(1+3*i):(3+3*i)])))
cRange
range(cRange)
cMax
#=========================================================================
# Import dataset cycle
#=========================================================================
cycle <- read.csv("cycle.csv", header=TRUE, sep=",")
# drop the last two columns
cycle <- cycle[,1:3]
#-------------------------------------------------------------------
# Keep those subjects that have more than 10 obs'n per cycle
cycle <- cycle[which(cycle[,3] > 10),]
#-------------------------------------------------------------------
# Delete those subjects with less than 3 cycles
id <- unique(cycle[,1])
tol <- length(id) # 328 subjects
# find the number of cycles for each woman
num <- sapply(1:tol, function(v) return(nrow(cycle[which(cycle[,1] == id[v]),])))
# create a variable cycleTol documenting the number of cycles each woman has in record
cycleTol <- unlist(lapply(1:tol, function(v) return(rep(num[v], num[v]))))
cycle$cycleTol <- cycleTol
# Keep those subjs with > 2 cycles
cycle <- cycle[which(cycle[,4] > 2),]
#-------------------------------------------------------------------
# Delete those subjects that don't have consecutive cycles
idnew <- unique(cycle[,1])
tolnew <- length(idnew) # 204 subjects
# return true if the subject has concecutive cycles
concecutive <- sapply(1:tolnew, function(v) return(all(diff(cycle[which(cycle[,1] == idnew[v]), 2]) == 1)))
# create a dataset indicating whether subjects have concecutive cycles
concecutiveTemp <- cbind(idnew, concecutive)
# subject id that have at least 3 concecutive cycles, 116 subjects
cId <-  concecutiveTemp[which(concecutiveTemp[,2] == 1), 1] # concecutiveId
tolCon <- length(cId)
# Keep those that have at least 3 concecutive cycles
concecutivelist <- lapply(1:tolCon, function(v) return(subset(cycle, cycle[,1] == cId[v])))
concecutiveCycle <- do.call("rbind", concecutivelist)
#-------------------------------------------------------------------
# Keep first 3 cycles for subjects
# Subj. with 3 concecutive cycles
concecutiveCycle3 <- do.call("rbind", by(concecutiveCycle, concecutiveCycle[,1], head, n = 3))
cc3 <- concecutiveCycle3[,1:3] # concecutiveCycle3
#=========================================================================
# Add responses - import dataset after
#=========================================================================
after <- read.csv("after.csv", header=TRUE, sep=",")
after <- after[,1:5] # 31945 * 5
# Go through each row and determine if a value is zero
row_sub = apply(after, 1, function(row) all(row !=0 ))
# Subset as usual
after <- after[row_sub,] # 30084 * 5
# Merge datasets after and concecutiveCycle3 cc3
afterlist <- lapply(1:tolCon, function(v) return(after[which(after[,1] == cId[v]),][which(after[which(after[,1] == cId[v]),][,2] %in% cc3[which(cc3[,1] == cId[v]), 2]),]))
afterC <- do.call("rbind", afterlist) # 9921 * 5
#=========================================================================
# Add age and BMI into dataset afterC
#=========================================================================
ready_cycle <- read.csv("ready_cycle.csv", header=TRUE, sep=",")
ready_cycle <- ready_cycle[,c(1, 29, 31)] # 309 subjects
# merge with concecutiveId
rc <- subset(ready_cycle, ready_cycle[,1] %in% cId) # 113 subj.
rc <- rc[-which(rc[,1] == 156), 1:3] # 112 subj.
# delete subj. that don't have age BMI data
temp <- cbind(cId, as.numeric(cId %in% ready_cycle[,1])) # 118, 335, 1019, 156
afterC <- subset(afterC, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# find the number of cycles for each woman
fid <- rc[,1] # final id
fidlength <- length(fid)
numObs <- sapply(1:fidlength, function(v) return(nrow(afterC[which(afterC[,1] == fid[v]),])))
age <- sapply(1:fidlength, function(v) return(rep(rc[v,2], numObs[v])))
BMI <- sapply(1:fidlength, function(v) return(rep(rc[v,3], numObs[v])))
# Add age and BMI to afterC, 9592 * 7, 112 subjects
afterC$age <- unlist(age)
afterC$BMI <- unlist(BMI)
#=========================================================================
# Delete missing data
#=========================================================================
# subset afterC, those with 4 concecutive cycles
# fid_4c <- c(2, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 20, 22, 25, 28, 30, 32, 34, 38, 39, 47, 60, 69, 81, 82, 89, 91, 92, 93, 99,
#             103, 107, 108, 123, 126, 128, 134, 138, 143, 144, 150, 166, 168, 170, 171, 174, 192, 193, 194, 198,
#             200, 201, 202, 210, 213, 217, 225, 234, 239, 251, 256, 274, 275, 284, 286, 287, 294,
#             302, 316, 1004, 1010, 1022, 1039, 1040, 1053, 1057, 1066, 1071, 1074, 1083, 1094, 1098, 1104, 1127)
#
# afterC <- subset(afterC, afterC[,1] %in% fid_4c) # 7112 * 10
# obtain index for subj id and cycle, obtain new cc3
cc3N <- subset(cc3, !(HSN4 %in% c(118, 156, 335, 1019))) # 9592 * 5
# cc3N <- subset(cc3, (HSN4 %in% fid_4c)) # 252*3
# cycleLength for each subj each cycle
# clength is the actual length of the cycle
# cMAx is the max of the nominal length
# e.g. a cycle is 1, 3, 5, 6, clength = 4, cMax = 6
clength <- sapply(1:dim(cc3N)[1], function(v) return(nrow(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),])))
cMax <- sapply(1:dim(cc3N)[1], function(v) return(max(afterC[which(afterC[,1] == cc3N[v,1]),][which(afterC[which(afterC[,1] == cc3N[v,1]),][,2] == cc3N[v,2]),3])))
# range of cycle lengths for each woman
cRange <- sapply(0:111, function(i) return(max(cMax[(1+3*i):(3+3*i)]) - min(cMax[(1+3*i):(3+3*i)])))
length(cRange[which(cRange == 1)]) # 7/112
length(cRange[which(cRange <= 5)]) # 73/112
length(cRange[which(cRange <= 10)]) # 94/112
quantile(cRange)
hist(cRange, main = "Range of Cycle Lengths for Each Woman")
length(cRange[which(cRange <= 20)]) # 94/112
hist(cRange, main = "Within-Woman Between-Cycle Range of Days")
hist(cRange, main = "Within-Woman Between-Cycle Range of Days", xlab = "within-woman between-cycle range")
hist(cRange, main = "Within-Woman Between-Cycle Range of Days", xlab = "within-woman between-cycle range (days)")
112-94
106-94
bet73+14
73+14
7 + 73
+14
length(cRange[which(cRange == 1)]) # 7/112
length(cRange[which(cRange <= 5)]) # 73/112
length(cRange[which(cRange <= 10)]) # 94/112
length(cRange[which(6 < cRange <= 10)]) # 94/112
length(cRange[which(cRange <= 10 && cRange > 6)]) # 94/112
length(cRange[which(cRange <= 10 & cRange > 6)]) # 94/112
length(cRange[which(cRange <= 10 & cRange > 5)]) # 16/112
length(cRange[which(cRange <= 5 & cRange > 1)]) # 73/112
length(cRange[which(cRange <= 5 & cRange > 1)]) # 66/112
66+7+21
66+7
length(cRange[which(cRange <= 20 & cRange > 10)]) # 106/112
cycle <- read.csv("cycle.csv", header=TRUE, sep=",") # 341 subjects
dim(cycle)
head(cycle)
after <- read.csv("after.csv", header=TRUE, sep=",")
dim(after)
head(after)
ready_cycle <- read.csv("ready_cycle.csv", header=TRUE, sep=",")
dim(ready_cycle)
head(ready_cycle)
31945 * 2
