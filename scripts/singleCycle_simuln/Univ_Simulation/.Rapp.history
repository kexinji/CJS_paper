# Bivaraite simulations, one cycle, unknown variances & smoothing parameters#
#
#==============================================================================#
# Initialization#
#==============================================================================#
#
library(sde) # rsOU#
library(MASS) # mvrnorm#
#
n = 30 # number of subjects#
tp = 28 # 28 time points for one period#
#
#------------------------------------------------------------------------------#
# Variance initialization #
#
# theta0 = c(lambda1, lambda2, phi1, phi2, phi3, sigma1, sigma2, theta12, theta13, theta22, theta23)#
#
param = c(1.5, 0.5, 1.2, 0.8, 0.6, 2, 3, 2, 5, 0.15, 2)#
#
D = matrix(c(param[3], param[4], param[4], param[5]), 2, 2) # variance for bi#
var_eps = c(param[6], param[7])#
sigma = diag(var_eps) # variance for epsilon#
# theta12 = 2 # par[6]#
# theta13 = 3 # par[7]#
# theta22 = 2 # par[8]#
# theta23 = 5 # par[9]#
# # Smoothing parameters initialization#
# lambda1 = 0.15 # par[10]#
# lambda2 = 2 # par[11]#
#
#------------------------------------------------------------------------------#
# periodic function with period length equal to 28 days#
t = seq(1, 28)  #
f1 = 5*sin((2*pi/tp)*t)#
f2 = 3*cos((2*pi/tp)*t)#
# plot(t, f1, type = "l")#
# plot(t, f2, type = "l")#
#
#------------------------------------------------------------------------------#
# X#
set.seed(34)#
age = sample(20:44, size = n, replace = T)#
#
X = matrix(0, 2*tp*n, 2)#
for (i in 1:n) {#
	# the first column of 1st subject of Xi is age[1], 0, age[2], 0...#
	X[((2*tp)*(i-1)+1):(2*tp*i), 1] = rep(c(age[i], 0), tp) 	#
	# the second column of 1st subject of Xi is 0, age[1], 0, age[2]...#
	X[((2*tp)*(i-1)+1):(2*tp*i), 2] = rep(c(0, age[i]), tp) #
}#
#------------------------------------------------------------------------------#
# Z#
Zi = matrix(0, 2*tp, 2) # initialize matrix Zi#
Zi[ ,1] = rep(c(1, 0), tp) # the first column of Zi is 1, 0, 1, 0...#
Zi[ ,2] = rep(c(0, 1), tp) # the second column of Zi is 0, 1, 0, 1...#
Z = do.call("rbind", replicate(n, Zi, simplify = F))#
#------------------------------------------------------------------------------#
# Initializaiton of beta1#
beta11 = 0.03#
beta21 = 0.07
#==============================================================================#
# Matrices that does not depend on Y#
#==============================================================================#
#
# A function that return a block matrix, code found online.#
blockMatrixDiagonal <- function(...) {#
	matrixList <- list(...)#
	if(is.list(matrixList[[1]])) matrixList <- matrixList[[1]]#
	dimensions <- sapply(matrixList, FUN = function(x) dim(x)[1])#
	finalDimension <- sum(dimensions)#
  	finalMatrix<-matrix(0, nrow=finalDimension, ncol=finalDimension)#
	index <- 1#
	for (k in 1:length(dimensions)) {#
		finalMatrix[index:(index+dimensions[k]-1), index:(index + dimensions[k] -1)] <- matrixList[[k]]#
		index <- index + dimensions[k]#
	}#
	finalMatrix#
}#
# Matrix K, does not depend on theta#
#
# Define matrix Q, double checked.#
Q = matrix(0, tp, tp-2)#
for(j in 1:(tp-2)) {#
	Q[j, j] = 1/2#
	Q[j + 1, j] = -1#
	Q[j + 2, j] = 1/2#
}#
#
# Define matrix R #
R = matrix(0, tp-2, tp-2)#
for (i in 1:(tp-2)) {#
	R[i, i] = (1/3)*4#
}#
for (i in 1:(tp-3)) {#
	R[i, i + 1] = (1/6)*2#
	R[i + 1, i] = (1/6)*2#
}#
#
K = Q %*% ginv(R) %*% t(Q)#
# Incidence matrices N1 & N2#
Ni <- diag(28)#
A1i <- matrix(0, 2*tp, tp) # initialize matrix A1i#
A2i <- matrix(0, 2*tp, tp) # initialize matrix A2i#
for (j in 1:tp){#
	A1i[2*j-1, j] <- 1#
	A2i[2*j, j] <- 1 #
}#
N1i <- A1i %*% Ni#
N2i <- A2i %*% Ni#
#
N1  = do.call("rbind", replicate(n, N1i, simplify = F))#
N2  = do.call("rbind", replicate(n, N2i, simplify = F))#
# MATRICES B1* B2*#
#
# Matrix B#
LTranspose = chol(K, pivot = T, LDL = T) # upper triangular matrix#
L = t(LTranspose) # lower triangular matrix#
B = L %*% ginv((t(L) %*% L))#
#
# Bstar#
B1star = N1 %*% B#
B2star = N2 %*% B
?do.call
var_eps = c(param[6], param[7])
var_esp
var_eps
sigma
diag(rep(var_eps, tp))
sigma_i = diag(rep(var_eps, tp))
dim(sigma_i)
diff = matrix(rep(1, 11), 1, 11)
diff
matrix(1, 1, 11)
dim(X)
# Partial derivative of V wrt the variance of b#
	parV_b = do.call("blockMatrixDiagonal", replicate(n, Zi %*% t(Zi), simplify = F))
dim(parV_b)
30*15
