# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#--------------------------------------------------------------
# Generate obs'ns from OU
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, u){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
plot(pred(-5:5), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#--------------------------------------------------------------
# Generate obs'ns from OU
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
plot(pred(-5:5, u), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
pred(-5:5, u)
plot(pred(-5:5, u), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
plot(pred(-5:5, u), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
plot(pred(-5:5, u), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
store <- matrix(0, 11, m)
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
store <- matrix(0, 11, m)
store[,1] <- pred(-5:5, u)
store
# Generate 10 observations from OU, m iterations
n <- 10
m <- 3
ugen <- rsOU(n, theta=thetaOU) # each column is a new iteration
# combine u0 and u
u <- c(u0, ugen)
store[,2] <- pred(-5:5, u)
store
store[,3] <- pred(-5:5, u)
store
storeMean <- rowMeans(store)
storeMean
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
n <- 10
m <- 3
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store <- matrix(0, 11, m)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
store
n <- 10
m <- 3
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
store
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
#--------------------------------------------------------------
# Generate obs'ns from OU
n <- 10
predf <- function(m){
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
return(storeMean)
}
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
#--------------------------------------------------------------
# Generate obs'ns from OU
n <- 10
predf <- function(m){
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
return(storeMean)
}
predf(3)
m <- 3
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
store
storeMean
predf <- function(m){
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
return(storeMean)
}
predf(3)
predf(5)
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
#--------------------------------------------------------------
# Generate obs'ns from OU
n <- 10
predf <- function(m){
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
return(storeMean)
}
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
par(new = T)
plot(predf(10), type = "l", color = "red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
plot(predf(10), type = "l", colour = "red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
par(new = T)
plot(predf(10), type = "l", colour = "red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
par(new = T)
plot(predf(10), lty = 3, colour = "red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
par(new = T)
plot(predf(10), lty = 3, ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
warnings
warnings()
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
#--------------------------------------------------------------
# Generate obs'ns from OU
n <- 10
predf <- function(m){
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
return(storeMean)
}
plot(predf(3), type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
par(new = T)
plot(predf(10), lty = 3, ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
predf(10)
predf(3)
m <- 3
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
m <- 3
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
m <- 100
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
m <- 500
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
par(new = T)
plot(predf(10), lty = 3, ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
par(new = T)
plot(predf(10), col="red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
m <- 100
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
#   return(storeMean)
# }
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n")
m <- 500
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
par(new = T)
plot(storeMean, col="red", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 500 iterations
m <- 100
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 100 iterations
m <- 1000
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
par(new = T)
plot(storeMean, col="red", type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 500 iterations
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
m <- 10000
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u)
storeMean <- rowMeans(store)
}
storeMean
par(new = T)
plot(storeMean, col="blue", type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 500 iterations
axis(1, at = seq(2, 11, by = 2), labels = seq(-4, 4, by = 2))
library(sde) # rsOU()
#--------------------------------------------------------------
# Parameter Initialization for OU process, a = theta[2], sigma = theta[3]
thetaOU <- c(0, 2, 2)
# obtain true alpha, and var
alpha <- exp(-thetaOU[2])
vari <- thetaOU[3]^2/(2*thetaOU[2])
# Initialize the first observation for OU
u0 <- rnorm(1, 0, vari)
#-------------------------------------------------------------
# predictive distribution function for U
# for one iteration
pred <- function(w, simulationData, n){
# obtain alpha star, variance from generated data u, for one iteration
alphaNu <- sum(u[1:n]*ugen)
alphaDe <- sum(u^2)
alphaStar <- alphaNu/alphaDe
varStar <- sum((ugen - alphaStar*u[1:n])^2/n)
# obtain the distribution function from u
num <- (alphaStar - alpha)*ugen[n] + w*sqrt(varStar * (1-alphaStar^2))
den <- sqrt(vari*(1 - alpha^2))
return(pnorm(num/den))
}
#--------------------------------------------------------------
# Generate obs'ns from OU
n <- 100
# predf <- function(m){
m <- 10
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u, n)
storeMean <- rowMeans(store)
}
plot(storeMean, type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 100 iterations
n <- 10
# predf <- function(m){
m <- 10
store <- matrix(0, 11, m) # store predictive distribution function values
for (i in 1:m) {
# Generate 10 observations from OU, m iterations, each column is a new iteration
ugen <- rsOU(n, theta=thetaOU)
# combine u0 and u
u <- c(u0, ugen)
store[,i] <- pred(-5:5, u, n)
storeMean <- rowMeans(store)
}
par(new = T)
plot(storeMean, col="red", type = "l", ylim = c(0, 1), xlab = "w", ylab = "G(w)", xaxt="n") # 500 iterations
