standay[cl, i] <- temp$standday[ij]
mu_true[cl, i] <- log(data[ij, 4])
#--------------------------------------------------------------------------
# prediction est conditional on true prior data
mu_naive[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(log(data[ij_1,4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[1,i] <- mean((mu_naive[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 2
if (all(t[ij] %in% t[ij_pc])) { # Check if time points in C3 is a subset of C2
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc <- log(temp[match(t[ij_1][-1], t[ij_pc]),4])
} else {
# linear interpolation from data in Cycle 2, produce NA for end points
int <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_pc <- log(int(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc ) ) > 0) {
# check the position of NA
na.pos <- which(is.na(data_pc))
# obtain interpolation for NA produced from the first cycle, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na <- log(int.na(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from 2nd cycle.
data_pc[na.pos] <- data_na
}
}
mu_pc[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[2,i] <- mean((mu_pc[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 1
# Obtain observations from C1, at time points from C3
if (all(t[ij] %in% t[ij_pc1])) { # Check if time points in C3 is a subset of C1
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc1 <- log(temp[match(t[ij_1][-1], t[ij_pc1]),4])
} else {
# linear interpolation from data in Cycle 1, produce NA for end points
int1 <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
data_pc1 <- log(int1(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc1 ) ) > 0) {
# check the position of NA
na.pos1 <- which(is.na(data_pc1))
# obtain interpolation for NA produced from cycle 2, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na1 <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na1 <- log(int.na1(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from cycle 1.
data_pc1[na.pos] <- data_na1
}
}
mu_pc1[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc1) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[3,i] <- mean((mu_pc1[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction est conditional on predictive prior data
mu_pre[1, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[1] + alpha[1]*(log(data[ij_1[1],4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[1])
for (j in 2:length(ij)) {
mu_pre[j, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[j] + alpha[j]*(mu_pre[j-1, i] - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[j])
}
pse_sub[4,i] <- mean((mu_pre[cl, i] - log(data[ij, 4]))^2)
#----------------------------------------------------------------
# Weighted version of past two cycles
mu25[cl, i] <- 0.25*mu_pre[cl, i] + 0.75*mu_pc[cl, i]
mu50[cl, i] <- 0.50*mu_pre[cl, i] + 0.50*mu_pc[cl, i]
mu75[cl, i] <- 0.75*mu_pre[cl, i] + 0.25*mu_pc[cl, i]
pse_sub[5,i] <- mean((mu25[cl, i] - log(data[ij, 4]))^2)
pse_sub[6,i] <- mean((mu50[cl, i] - log(data[ij, 4]))^2)
pse_sub[7,i] <- mean((mu75[cl, i] - log(data[ij, 4]))^2)
}
# Record the average pse over all m subjects for the dataset
pse <- rowMeans(pse_sub)
round(pse, 4)
pse_sub
sortpse <- sort(pse_sub[2,])
pseIn <- c(which.min(pse_sub[2,]), match(sortpse[5], pse_sub[2,]), match(sortpse[25], pse_sub[2,]), match(sortpse[44], pse_sub[2,]))
pseIn
theta <- c(rep(1, 3), 0.1, -3, -5, -2) # NOU
# Initializations
pse_sub <- matrix(0, 7, m) # Store PSE, column for each subj, row for naive, pre, pc PSE
mu_true <- matrix(NA, max(n3i), m)
mu_naive <- matrix(NA, max(n3i), m)
mu_pc <- matrix(NA, max(n3i), m)
mu_pc1 <- matrix(NA, max(n3i), m)
mu_pre <- matrix(NA, max(n3i), m)
mu25 <- matrix(NA, max(n3i), m)
mu50 <- matrix(NA, max(n3i), m)
mu75 <- matrix(NA, max(n3i), m)
CI_lower <- matrix(NA, max(n3i), m)
CI_upper <- matrix(NA, max(n3i), m)
standay <- matrix(NA, max(n3i), m)
for (i in 1:m) {
temp <- data[which(data$womanid == samp[i]),]
temp$index <- 1:dim(temp)[1]
t <- (temp$standday %% 28)/10
# indexes of time points
ij <- temp$index[which(temp$CYCLE == 3)]
ij_1 <- ij - 1
ij_pc <- temp$index[which(temp$CYCLE == 2)]
ij_pc1 <- temp$index[which(temp$CYCLE == 1)]
cl <- 1:length(ij)
alpha <- exp(abs(t[ij] - t[ij_1])*log(theta[4]))
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
tAge <- unique(temp$age)
uW <- unique(temp$underWeight)
oW <- unique(temp$overWeight)
f_ij <- res$fHat[temp$standday[ij]]
f_ij1 <- res$fHat[temp$standday[ij_1]]
# Record response, standday for plotting
standay[cl, i] <- temp$standday[ij]
mu_true[cl, i] <- log(data[ij, 4])
#--------------------------------------------------------------------------
# prediction est conditional on true prior data
mu_naive[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(log(data[ij_1,4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[1,i] <- mean((mu_naive[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 2
if (all(t[ij] %in% t[ij_pc])) { # Check if time points in C3 is a subset of C2
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc <- log(temp[match(t[ij_1][-1], t[ij_pc]),4])
} else {
# linear interpolation from data in Cycle 2, produce NA for end points
int <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_pc <- log(int(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc ) ) > 0) {
# check the position of NA
na.pos <- which(is.na(data_pc))
# obtain interpolation for NA produced from the first cycle, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na <- log(int.na(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from 2nd cycle.
data_pc[na.pos] <- data_na
}
}
mu_pc[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[2,i] <- mean((mu_pc[cl, i] - log(data[ij, 4]))^2)
#--------------------
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
# Confidence Intervals
sd <- sqrt(variance)
CI_lower[cl, i] <- mu_pc[cl, i] - 1.96*sd
CI_upper[cl, i] <- mu_pc[cl, i] + 1.96*sd
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 1
# Obtain observations from C1, at time points from C3
if (all(t[ij] %in% t[ij_pc1])) { # Check if time points in C3 is a subset of C1
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc1 <- log(temp[match(t[ij_1][-1], t[ij_pc1]),4])
} else {
# linear interpolation from data in Cycle 1, produce NA for end points
int1 <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
data_pc1 <- log(int1(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc1 ) ) > 0) {
# check the position of NA
na.pos1 <- which(is.na(data_pc1))
# obtain interpolation for NA produced from cycle 2, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na1 <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na1 <- log(int.na1(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from cycle 1.
data_pc1[na.pos] <- data_na1
}
}
mu_pc1[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc1) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[3,i] <- mean((mu_pc1[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction est conditional on predictive prior data
mu_pre[1, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[1] + alpha[1]*(log(data[ij_1[1],4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[1])
for (j in 2:length(ij)) {
mu_pre[j, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[j] + alpha[j]*(mu_pre[j-1, i] - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[j])
}
pse_sub[4,i] <- mean((mu_pre[cl, i] - log(data[ij, 4]))^2)
#----------------------------------------------------------------
# Weighted version of past two cycles
mu25[cl, i] <- 0.25*mu_pre[cl, i] + 0.75*mu_pc[cl, i]
mu50[cl, i] <- 0.50*mu_pre[cl, i] + 0.50*mu_pc[cl, i]
mu75[cl, i] <- 0.75*mu_pre[cl, i] + 0.25*mu_pc[cl, i]
pse_sub[5,i] <- mean((mu25[cl, i] - log(data[ij, 4]))^2)
pse_sub[6,i] <- mean((mu50[cl, i] - log(data[ij, 4]))^2)
pse_sub[7,i] <- mean((mu75[cl, i] - log(data[ij, 4]))^2)
}
# Record the average pse over all m subjects for the dataset
pse <- rowMeans(pse_sub)
round(pse, 4)
pse_sub
#--------------------------------------------------------------------------
# Index identifying subj's with the smallest, second smallest, median and largest PSE values
sortpse <- sort(pse_sub[2,])
pseIn <- c(which.min(pse_sub[2,]), match(sortpse[5], pse_sub[2,]), match(sortpse[25], pse_sub[2,]), match(sortpse[44], pse_sub[2,]))
mu <- cbind(mu_true[,pseIn], mu_naive[,pseIn], mu_pc[,pseIn], mu_pc1[,pseIn], mu_pre[,pseIn], mu25[,pseIn], mu50[,pseIn], mu75[,pseIn], CI_lower[,pseIn], CI_upper[,pseIn])
sday <- standay[,pseIn]
# index of non-na standdaysay
si <- sapply(1:4, function(v) return(1:sum(!is.na(sday[,v]))))
# plot smallest, second smallest, median and largest PSE values
dev.new(width=8, height=2)
par(mfrow=c(2,2))
matplot(sday[si[[1]], 1], mu[si[[1]], seq(1, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[2]], 2], mu[si[[2]], seq(2, 40, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Second Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[3]], 3], mu[si[[3]], seq(3, 40, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Median PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[4]], 4], mu[si[[4]], seq(4, 40, by = 4)], type="l", lty = 1:8, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Largest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
theta <- c(rep(1, 3), 0.1, -3, -5, -2) # NOU
# Initializations
pse_sub <- matrix(0, 7, m) # Store PSE, column for each subj, row for naive, pre, pc PSE
mu_true <- matrix(NA, max(n3i), m)
mu_naive <- matrix(NA, max(n3i), m)
mu_pc <- matrix(NA, max(n3i), m)
mu_pc1 <- matrix(NA, max(n3i), m)
mu_pre <- matrix(NA, max(n3i), m)
mu25 <- matrix(NA, max(n3i), m)
mu50 <- matrix(NA, max(n3i), m)
mu75 <- matrix(NA, max(n3i), m)
CI_lower <- matrix(NA, max(n3i), m)
CI_upper <- matrix(NA, max(n3i), m)
standay <- matrix(NA, max(n3i), m)
for (i in 1:m) {
temp <- data[which(data$womanid == samp[i]),]
temp$index <- 1:dim(temp)[1]
t <- (temp$standday %% 28)/10
# indexes of time points
ij <- temp$index[which(temp$CYCLE == 3)]
ij_1 <- ij - 1
ij_pc <- temp$index[which(temp$CYCLE == 2)]
ij_pc1 <- temp$index[which(temp$CYCLE == 1)]
cl <- 1:length(ij)
alpha <- exp(abs(t[ij] - t[ij_1])*log(theta[4]))
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
tAge <- unique(temp$age)
uW <- unique(temp$underWeight)
oW <- unique(temp$overWeight)
f_ij <- res$fHat[temp$standday[ij]]
f_ij1 <- res$fHat[temp$standday[ij_1]]
# Record response, standday for plotting
standay[cl, i] <- temp$standday[ij]
mu_true[cl, i] <- log(data[ij, 4])
#--------------------------------------------------------------------------
# prediction est conditional on true prior data
mu_naive[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(log(data[ij_1,4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[1,i] <- mean((mu_naive[cl, i] - log(data[ij, 4]))^2)
#--------------------
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
# Confidence Intervals
sd <- sqrt(variance)
CI_lower[cl, i] <- mu_naive[cl, i] - 1.96*sd
CI_upper[cl, i] <- mu_naive[cl, i] + 1.96*sd
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 2
if (all(t[ij] %in% t[ij_pc])) { # Check if time points in C3 is a subset of C2
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc <- log(temp[match(t[ij_1][-1], t[ij_pc]),4])
} else {
# linear interpolation from data in Cycle 2, produce NA for end points
int <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_pc <- log(int(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc ) ) > 0) {
# check the position of NA
na.pos <- which(is.na(data_pc))
# obtain interpolation for NA produced from the first cycle, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na <- log(int.na(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from 2nd cycle.
data_pc[na.pos] <- data_na
}
}
mu_pc[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[2,i] <- mean((mu_pc[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction results conditional (mostly) on cycle 1
# Obtain observations from C1, at time points from C3
if (all(t[ij] %in% t[ij_pc1])) { # Check if time points in C3 is a subset of C1
# data from previous cycle, where t[ij][k] = t[ij_pc][k] for all k
data_pc1 <- log(temp[match(t[ij_1][-1], t[ij_pc1]),4])
} else {
# linear interpolation from data in Cycle 1, produce NA for end points
int1 <- approxfun(temp$standday[which(temp$CYCLE == 1)], temp[ij_pc1,4])
data_pc1 <- log(int1(temp$standday[which(temp$CYCLE == 3)][1:(length(ij)-1)]))
if (sum( is.na( data_pc1 ) ) > 0) {
# check the position of NA
na.pos1 <- which(is.na(data_pc1))
# obtain interpolation for NA produced from cycle 2, hopefully
# Still need to come up with ways to interpolations if neither of the past two cycle data works
int.na1 <- approxfun(temp$standday[which(temp$CYCLE == 2)], temp[ij_pc,4])
# cubic spline interpolation
# int_sp <- splinefun(t[ij_pc], temp[ij_pc,4]) # cubic spline interpolation
data_na1 <- log(int.na1(temp$standday[which(temp$CYCLE == 3)][na.pos]))
# merge the interpolation for NA with the rest of Non-NA interpolation produced from cycle 1.
data_pc1[na.pos] <- data_na1
}
}
mu_pc1[cl, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij + alpha*(c(log(data[ij_1[1],4]),data_pc1) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1)
pse_sub[3,i] <- mean((mu_pc1[cl, i] - log(data[ij, 4]))^2)
#--------------------------------------------------------------------------
# prediction est conditional on predictive prior data
mu_pre[1, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[1] + alpha[1]*(log(data[ij_1[1],4]) - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[1])
for (j in 2:length(ij)) {
mu_pre[j, i] <- res$betaHat[1]*tAge + res$betaHat[2]*uW + res$betaHat[3]*oW + f_ij[j] + alpha[j]*(mu_pre[j-1, i] - res$betaHat[1]*tAge - res$betaHat[2]*uW - res$betaHat[3]*oW - f_ij1[j])
}
pse_sub[4,i] <- mean((mu_pre[cl, i] - log(data[ij, 4]))^2)
#----------------------------------------------------------------
# Weighted version of past two cycles
mu25[cl, i] <- 0.25*mu_pre[cl, i] + 0.75*mu_pc[cl, i]
mu50[cl, i] <- 0.50*mu_pre[cl, i] + 0.50*mu_pc[cl, i]
mu75[cl, i] <- 0.75*mu_pre[cl, i] + 0.25*mu_pc[cl, i]
pse_sub[5,i] <- mean((mu25[cl, i] - log(data[ij, 4]))^2)
pse_sub[6,i] <- mean((mu50[cl, i] - log(data[ij, 4]))^2)
pse_sub[7,i] <- mean((mu75[cl, i] - log(data[ij, 4]))^2)
}
# Record the average pse over all m subjects for the dataset
pse <- rowMeans(pse_sub)
sortpse <- sort(pse_sub[2,])
pseIn <- c(which.min(pse_sub[2,]), match(sortpse[5], pse_sub[2,]), match(sortpse[25], pse_sub[2,]), match(sortpse[44], pse_sub[2,]))
# Index identifying subj's with the smallest, 10%, median and 90% PSE values
# pseIn <- c(which.min(pse_sub[2,]), match(quantile(pse_sub[2,], .1), pse_sub[2,]), match(quantile(pse_sub[2,], .5), pse_sub[2,]), quantile(pse_sub[2,], .9))
mu <- cbind(mu_true[,pseIn], mu_naive[,pseIn], mu_pc[,pseIn], mu_pc1[,pseIn], mu_pre[,pseIn], mu25[,pseIn], mu50[,pseIn], mu75[,pseIn], CI_lower[,pseIn], CI_upper[,pseIn])
sday <- standay[,pseIn]
# index of non-na standdaysay
si <- sapply(1:4, function(v) return(1:sum(!is.na(sday[,v]))))
# plot smallest, second smallest, median and largest PSE values
dev.new(width=8, height=2)
par(mfrow=c(2,2))
matplot(sday[si[[1]], 1], mu[si[[1]], seq(1, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[2]], 2], mu[si[[2]], seq(2, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Second Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[3]], 3], mu[si[[3]], seq(3, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Median PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[4]], 4], mu[si[[4]], seq(4, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-2.5, 2.7), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Largest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
#--------------------------------------------------------------------------
# Index identifying subj's with the smallest, second smallest, median and largest PSE values
sortpse <- sort(pse_sub[2,])
pseIn <- c(which.min(pse_sub[2,]), match(sortpse[5], pse_sub[2,]), match(sortpse[25], pse_sub[2,]), match(sortpse[44], pse_sub[2,]))
# Index identifying subj's with the smallest, 10%, median and 90% PSE values
# pseIn <- c(which.min(pse_sub[2,]), match(quantile(pse_sub[2,], .1), pse_sub[2,]), match(quantile(pse_sub[2,], .5), pse_sub[2,]), quantile(pse_sub[2,], .9))
mu <- cbind(mu_true[,pseIn], mu_naive[,pseIn], mu_pc[,pseIn], mu_pc1[,pseIn], mu_pre[,pseIn], mu25[,pseIn], mu50[,pseIn], mu75[,pseIn], CI_lower[,pseIn], CI_upper[,pseIn])
sday <- standay[,pseIn]
# index of non-na standdaysay
si <- sapply(1:4, function(v) return(1:sum(!is.na(sday[,v]))))
# plot smallest, second smallest, median and largest PSE values
dev.new(width=8, height=2)
par(mfrow=c(2,2))
matplot(sday[si[[1]], 1], mu[si[[1]], seq(1, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[2]], 2], mu[si[[2]], seq(2, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Second Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[3]], 3], mu[si[[3]], seq(3, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Median PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[4]], 4], mu[si[[4]], seq(4, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Largest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
# plot smallest, second smallest, median and largest PSE values
dev.new(width=8, height=2)
par(mfrow=c(2,2))
matplot(sday[si[[1]], 1], mu[si[[1]], seq(1, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[2]], 2], mu[si[[2]], seq(2, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "10% Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[3]], 3], mu[si[[3]], seq(3, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "Median PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(sday[si[[4]], 4], mu[si[[4]], seq(4, 40, by = 4)], type="l", lty = 1:10, col=c("black", "pink", "blue", "red", "green", "orange", "yellow", "purple", "gray", "gray"), ylim = c(-5, 5), xlab = "Days in the 3rd standardized cycle", ylab = "Log progesterone", xaxt="n", main = "90th PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
pred_results <- read.table("pred_univSim50.txt")
pred_results <- read.table("pred_univSim50.txt")
pse <- round(pred_results[1, 1:7],4)
dim(pred_results[2:29,c(1:3,5:6)])
t <- (1:56 %% 28)/10
ij <- 29:56
ij_1 <- 28:55
theta <- c(rep(1, 3), 0.1, -3, -5, -2)
alpha <- exp(abs(t[ij] - t[ij_1])*log(theta[4]))
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
# Confidence Intervals
sd <- sqrt(variance)
CI_lower1 <- pred_results[2:29,2] - 1.96*sd
CI_upper1 <- pred_results[2:29,2] + 1.96*sd
CI_lower2 <- pred_results[30:57,2] - 1.96*sd
CI_upper2 <- pred_results[30:57,2] + 1.96*sd
CI_lower3 <- pred_results[58:85,2] - 1.96*sd
CI_upper3 <- pred_results[58:85,2] + 1.96*sd
CI_lower4 <- pred_results[86:113,2] - 1.96*sd
CI_upper4 <- pred_results[86:113,2] + 1.96*sd
#--------------------------------------------------------------------------
t <- (1:56 %% 28)/10
ij <- 29:56
ij_1 <- 28:55
theta <- c(rep(1, 3), 0.1, -3, -5, -2)
alpha <- exp(abs(t[ij] - t[ij_1])*log(theta[4]))
# A HELPER FUNCTION that RETURNS coefficients of periodic cubic splines
s <- function(knot, t) {
T <- 28
a <- -T*(T - knot)/2 + 3*(T - knot)^2/2 - (T - knot)^3/T
b <- 3*(T - knot)/2 - 3*(T - knot)^2/(2*T)
c <- -(T - knot)/T
sj <- a*t + b*t^2 + c*t^3 + (t - knot)^3*((t - knot)^3>0)
return(sj)
}
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
# Confidence Intervals
sd <- sqrt(variance)
CI_lower1 <- pred_results[2:29,2] - 1.96*sd
CI_upper1 <- pred_results[2:29,2] + 1.96*sd
CI_lower2 <- pred_results[30:57,2] - 1.96*sd
CI_upper2 <- pred_results[30:57,2] + 1.96*sd
CI_lower3 <- pred_results[58:85,2] - 1.96*sd
CI_upper3 <- pred_results[58:85,2] + 1.96*sd
CI_lower4 <- pred_results[86:113,2] - 1.96*sd
CI_upper4 <- pred_results[86:113,2] + 1.96*sd
dev.new(width=8, height=2)
#pdf("RP_simUnivPred50.pdf")
par(mfrow=c(2,2))
matplot(1:28, c(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[30:57,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Second Smallest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[58:85,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Median PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[86:113,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Largest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
#dev.off()
CI_lower1
pred_results[2:29,c(1:3,5:6)]
c(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1)
CI_lower1 <- as.column(pred_results[2:29,2] - 1.96*sd)
t(CI_lower1)
dim(CI_lower1)
as.matrix(CI_lower1)
# Variance
expo <- theta[5] + (theta[6]*(s(28/3, t[ij_1]) + s(28/3, t[ij])) + theta[7]*(s(56/3, t[ij_1]) + s(56/3, t[ij])))/2
variance <- (1 + alpha^2)*1 + (1 + alpha^2)*1 + exp(expo)*(1 - alpha^2)
# Confidence Intervals
sd <- sqrt(variance)
CI_lower1 <- as.matrix(pred_results[2:29,2] - 1.96*sd)
CI_upper1 <- as.matrix(pred_results[2:29,2] + 1.96*sd)
CI_lower2 <- as.matrix(pred_results[30:57,2] - 1.96*sd)
CI_upper2 <- as.matrix(pred_results[30:57,2] + 1.96*sd)
CI_lower3 <- as.matrix(pred_results[58:85,2] - 1.96*sd)
CI_upper3 <- as.matrix(pred_results[58:85,2] + 1.96*sd)
CI_lower4 <- as.matrix(pred_results[86:113,2] - 1.96*sd)
CI_upper4 <- as.matrix(pred_results[86:113,2] + 1.96*sd)
dev.new(width=8, height=2)
#pdf("RP_simUnivPred50.pdf")
par(mfrow=c(2,2))
matplot(1:28, c(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[30:57,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Second Smallest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[58:85,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Median PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, c(pred_results[86:113,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Largest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
c(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1)
CI_lower1
pred_results[2:29,c(1:3,5:6)]
cbind(pred_results[2:29,c(1:3,5:6)],CI_lower1)
matplot(1:28, cbind(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Smallest PSE ")
dev.new(width=8, height=2)
#pdf("RP_simUnivPred50.pdf")
par(mfrow=c(2,2))
matplot(1:28, cbind(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[30:57,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Second Smallest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[58:85,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Median PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[86:113,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = 1:7, col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Largest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
pred_results[2:29,2]
pred_results[30:57,2]
pred_results[58:85,2]
pred_results[86:113,2]
sd
dev.new(width=8, height=2)
#pdf("RP_simUnivPred50.pdf")
par(mfrow=c(2,2))
matplot(1:28, cbind(pred_results[2:29,c(1:3,5:6)],CI_lower1, CI_upper1), type="l", lty = c(1:5,6,6), col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Smallest PSE ")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[30:57,c(1:3,5:6)],CI_lower2, CI_upper2), type="l", lty = c(1:5,6,6), col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Second Smallest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[58:85,c(1:3,5:6)],CI_lower3, CI_upper3), type="l", lty = c(1:5,6,6), col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Median PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
matplot(1:28, cbind(pred_results[86:113,c(1:3,5:6)],CI_lower4, CI_upper4), type="l", lty = c(1:5,6,6), col=c("black", "blue", "red", "green", "orange", "pink", "pink"), xlab = "time points", ylab = "response", xaxt="n", main = "Largest PSE")
axis(1, at = seq(0, 28, by = 4), labels = seq(0, 28, by = 4))
#dev.off()
